<?php
/**
 * @file
 * Code for the Playbox Battles feature.
 */

include_once 'playbox_battles.features.inc';

/**
 * Implementation of hook_init()
 */
function playbox_battles_init() {
  // Load CS and JS
  drupal_add_css(drupal_get_path('module', 'playbox_battles') . '/css/playbox_battles.css');
}

/**
 * Implementation of hook_theme().
 */
function playbox_battles_theme($existing, $type, $theme, $path) {
  // Replace each dash with an underscore in the hook name.
  $themes['views_view_fields__playbox_battles__playbox_battles_featured_1'] = array(
    'template' => 'views-view-fields--playbox-battles--playbox-battles-featured-1',
    'original hook' => 'views_view_fields',
    'path' => drupal_get_path('module', 'playbox_battles') . '/templates',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view_fields',
      'playbox_battles_preprocess_views_view_fields__playbox_battles__playbox_battles_featured_1',
    ),
    'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL),
  );

  $themes['views_view_fields__playbox_battles__playbox_battles_list_1'] = array(
    'template' => 'views-view-fields--playbox-battles--playbox-battles-featured-1',
    'original hook' => 'views_view_fields',
    'path' => drupal_get_path('module', 'playbox_battles') . '/templates',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view_fields',
      'playbox_battles_preprocess_views_view_fields__playbox_battles__playbox_battles_featured_1',
    ),
    'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL),
  );

  return $themes;
}

/**
 * Implementation of hook_menu().
 */
function playbox_battles_menu() {
  $items['playbox-battles/vote/nojs/%/%'] = array(
    'page callback' => 'playbox_battles_vote',
    'page arguments' => array(2, 3, 4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['playbox-battles/vote/ajax/%/%'] = array(
    'delivery callback' => 'ajax_deliver',
  ) + $items['playbox-battles/vote/nojs/%/%'];

  return $items;
}

/**
 * Implements hook_preprocess_views_view_fields()
 */
function playbox_battles_preprocess_views_view_fields__playbox_battles__playbox_battles_featured_1(&$variables) {
  // We need that ajax magixxx
  drupal_add_library('system', 'drupal.ajax');
  $nid = $variables['row']->nid;
  $president_nid = $variables['row']->node_field_data_field_playbox_president_nid;
  $robot_nid = $variables['row']->node_field_data_field_playbox_robot_nid;

  // Set up our ajax magix
  $query = array(
    'tok' => drupal_get_token('playbox_battles_vote_' . $nid),
  ) + drupal_get_destination();
  $variables['options']['robot_votes'] = array(
    '#type' => 'link',
    '#theme' => 'link',
    '#title' => '',
    '#href' => '',
    '#text' => '<span id="battler-'. $robot_nid . '" class="battler-vote-robot">' . render($variables['row']->field_field_playbox_robot_votes[0]['rendered']) . '</span>',
    '#path' => "playbox-battles/vote/ajax/" . $nid . "/robot",
    '#options' => array(
      'attributes' => array(
        'class' => 'vote-link use-ajax'
      ),
      'html' => TRUE,
      'query' => $query,
    ),
  );
  $variables['options']['president_votes'] = $variables['options']['robot_votes'];
  $variables['options']['president_votes']['#text'] = '<span id="battler-' . $president_nid . '" class="battler-vote-president">' . render($variables['row']->field_field_playbox_president_votes[0]['rendered']) . '</span>';
  $variables['options']['president_votes']['#path'] = "playbox-battles/vote/ajax/" . $nid . "/president";

  // Set some other stuff that might be useful but then again might be not useful at all
  $variables['options']['president_attributes']['class'][] = 'battler-box';
  $variables['options']['robot_attributes']['class'][] = 'battler-box';
  if ($variables['row']->field_field_playbox_battle_completed[0]['raw']['value'] == 1) {
    if ($variables['row']->field_field_playbox_robot_votes[0]['raw']['value'] == $variables['row']->field_field_playbox_votes_to_win[0]['raw']['value']) {
      $variables['options']['president_attributes']['class'][] = 'battler-battle-loser';
      $variables['options']['robot_attributes']['class'][] = 'battler-battle-winner';
    }
    else {
      $variables['options']['president_attributes']['class'][] = 'battler-battle-winner';
      $variables['options']['robot_attributes']['class'][] = 'battler-battle-loser';
    }
  }
}

/**
 * Allows us to add node--panopoly-news-article.tpl.php to the
 * registry.
 *
 * http://www.metachunk.com/blog/adding-module-path-drupal-7-theme-registry
 *
 * Implements hook_theme_registry_alter()
 **/
function playbox_battles_theme_registry_alter(&$theme_registry) {
  // add template file
  $mod_path = drupal_get_path('module', 'playbox_battles') . '/templates';
  $theme_registry_copy = $theme_registry;       // munge on a copy
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $mod_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $h) {
    _playbox_battles_insert_after_first_element($theme_registry[$h]['theme paths'], $mod_path);
  }
}

/**
 * Updates the vote total for a battler and closes vote when winner
 * has been declared
 */
function playbox_battles_vote($ajax, $nid, $type) {

  $is_ajax = $ajax === 'ajax';
  $winner_type = $loser_type = '';

  // Check if the type is correct
  if ($type != 'president' && $type != 'robot') {
    return MENU_ACCESS_DENIED;
  }

  // Secure the DB
  if (empty($_GET['tok']) || !drupal_valid_token($_GET['tok'], 'playbox_battles_vote_' . $nid, TRUE)) {
    return MENU_ACCESS_DENIED;
  }

  // Do some DB stuff
  $table = 'field_data_field_playbox_' . $type . '_votes';
  $field = 'field_playbox_' . $type . '_votes_value';
  $votes = db_select($table, 'f')
  ->fields('f', array($field))
  ->condition('entity_type', 'node')
  ->condition('bundle', 'playbox_battle')
  ->condition('entity_id', $nid)
  ->execute()
  ->fetchField();

  if (is_int($votes)) {
    return MENU_ACCESS_DENIED;
  }

  // Add a vote!
  $votes = $votes + 1;
  $node = node_load($nid);
  $votes_field = 'field_playbox_' . $type . '_votes';
  $wrapper = entity_metadata_wrapper('node', $node);
  $wrapper->{$votes_field}->set($votes);

  $votes_to_win = $wrapper->field_playbox_votes_to_win->value();

  $unvoted_type = ($type == 'president') ? 'robot' : 'president';
  $unvoted_votes_field = 'field_playbox_' . $unvoted_type . '_votes';
  $unvoted_type_votes = $wrapper->{$unvoted_votes_field}->value();

  // Check if (only one) has reached the required number of votes to win
  // and we haven't already closed this battle
  // - include "greater than" for historic battles in the system
  if (($votes != $unvoted_type_votes) && (max($votes, $unvoted_type_votes) >= $votes_to_win) && !$wrapper->field_playbox_battle_completed->value()) {
    // Work out the winner - which may not be the voted for battler
    // in the case of historic data!
    $winner_type = ($votes > $unvoted_type_votes) ? $type : $unvoted_type;

    // Someone won, somone lost. Store this on the node.
    $wrapper->field_playbox_battle_completed->set(1);
    $president = $wrapper->field_playbox_president->value();
    $robot = $wrapper->field_playbox_robot->value();

    if ($winner_type == 'president') {
      // President won.
      $winner_nid = $president->nid;
      $loser_nid = $robot->nid;
      $loser_type = 'robot';
    }
    else {
      // Robot won.
      $winner_nid = $robot->nid;
      $loser_nid = $president->nid;
      $loser_type = 'president';
    }

    // Set the battle to complete and set a winner and loser.
    $wrapper->field_playbox_battle_completed->set(1);
    $wrapper->field_playbox_winner->set($winner_nid);
    $wrapper->field_playbox_loser->set($loser_nid);
  }

  // Save the battle node with all the changes we made.
  $wrapper->save();

  // Do some fun stuff to update the user IRL
  if ($is_ajax) {
    $commands = array();

    // Update the displayed number of votes
    $field = 'field_playbox_' . $type;
    $selector = 'battler-' . $wrapper->{$field}->getIdentifier();
    $commands[] = ajax_command_replace('#' . $selector, '<span id="' . $selector . '" class="battler-vote-' . $type . '">' . $votes . '</span>', $settings = NULL);

    // Update display if battle has been won
    if ($wrapper->field_playbox_battle_completed->value()) {
      // Disable vote links
      $commands[] = ajax_command_invoke('.vote-link', 'attr', array('disabled','disabled'));
      // Highlight the winner
      $commands[] = ajax_command_invoke('.battler-vote-' . $winner_type, 'addClass', array('battle-winner'));
      // Gray out the loser
      $commands[] = ajax_command_invoke('.battler-vote-' . $loser_type, 'addClass', array('battle-loser'));
      // Add winner message
      $winner = ($winner_type == 'president') ? $wrapper->field_playbox_president->label() : $wrapper->field_playbox_robot->label();
      // Get loser name
      $loser = ($loser_type == 'president') ? $wrapper->field_playbox_president->label() : $wrapper->field_playbox_robot->label();
      drupal_add_js(drupal_get_path('theme', 'playbox_theme') . '/js/twitter.js');
      $commands[] = ajax_command_prepend('.battler-vs', '<div class="battle-message"><span class="battle-over">' . $winner . ' is victorious! <a class="twitter-share-button"
  href="https://twitter.com/intent/tweet?text=' . $winner . ' just won an epic battle against ' . $loser . '. Play other battles!&hashtags=playbox,kalamuna">
Tweet</a></span></div>', $settings = NULL);
    }

    return array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
  }
  else {
    drupal_set_message(t('SOMETHING'));
    drupal_goto();
  }
}

/**
 * Helper function for re-ordering arrays (needed by theme_registry_alter)
 *
 * http://www.metachunk.com/blog/adding-module-path-drupal-7-theme-registry
 */
function _playbox_battles_insert_after_first_element(&$a, $element) {
  if(is_array($a)) {
    $first_element = array_shift($a);
    array_unshift($a, $first_element, $element);
  }
}
